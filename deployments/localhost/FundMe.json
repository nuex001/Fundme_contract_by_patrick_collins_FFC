{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_priceFeed",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "fundingAddress",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getVersion",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "priceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xa324f45fe244384cb569efd2a850bc26d5976b22fca68d8843010aaa541c5156",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1030889",
        "logsBloom": "0x
        "blockHash": "0x1375c53edc5ba4d1d728b7eb050936b8c062156f6d8bfde99c136462eec1c55a",
        "transactionHash": "0xa324f45fe244384cb569efd2a850bc26d5976b22fca68d8843010aaa541c5156",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1030889",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "ff6caf0734b7a1b871ceecca52699847",
    "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface public priceFeed; //remeber to change to private s_priceFeed\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address _priceFeed) {\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x2bffbb9122135cf13106303b8573c3e455cc7d4e2c316b1487fa5309e471b662\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x85e1796e8ea7d1ae7df679124784e93ec9bada2bb235a8a1be214bff6462629c\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012cc380380620012cc83398181016040528101906200003791906200011d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161114562000187600039600081816103020152818161049501528181610561015281816106ec01526108e201526111456000f3fe6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461016b5780639e87a5cd14610196578063b60d4288146101c1578063be2693f0146101cb578063d7b4750c146101e257610091565b80630343fb25146100965780630d8e6e2c146100d35780633ccfd60b146100fe5780636b69a59214610115578063741bef1a14610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610b96565b61021f565b6040516100ca9190610bdc565b60405180910390f35b3480156100df57600080fd5b506100e8610268565b6040516100f59190610bdc565b60405180910390f35b34801561010a57600080fd5b50610113610300565b005b34801561012157600080fd5b5061012a61052a565b6040516101379190610bdc565b60405180910390f35b34801561014c57600080fd5b50610155610537565b6040516101629190610c56565b60405180910390f35b34801561017757600080fd5b5061018061055d565b60405161018d9190610c80565b60405180910390f35b3480156101a257600080fd5b506101ab610585565b6040516101b89190610c56565b60405180910390f35b6101c96105af565b005b3480156101d757600080fd5b506101e06106ea565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610cc7565b610978565b6040516102169190610c80565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610d09565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610385576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104305760008082815481106103aa576103a9610d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042890610d94565b915050610388565b50600067ffffffffffffffff81111561044c5761044b610ddc565b5b60405190808252806020026020018201604052801561047a5781602001602082028036833780820191505090505b5060009080519060200190610490929190610a8c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104d790610e3c565b60006040518083038185875af1925050503d8060008114610514576040519150601f19603f3d011682016040523d82523d6000602084013e610519565b606091505b505090508061052757600080fd5b50565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105ee600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109bf90919063ffffffff16565b101561062f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062690610eae565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461067e9190610ece565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107f257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107a8575b5050505050905060005b815181101561087d57600082828151811061081a57610819610d36565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061087590610d94565b9150506107fc565b50600067ffffffffffffffff81111561089957610898610ddc565b5b6040519080825280602002602001820160405280156108c75781602001602082028036833780820191505090505b50600090805190602001906108dd929190610a8c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161092490610e3c565b60006040518083038185875af1925050503d8060008114610961576040519150601f19603f3d011682016040523d82523d6000602084013e610966565b606091505b505090508061097457600080fd5b5050565b600080828154811061098d5761098c610d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109cb836109fb565b90506000670de0b6b3a764000085836109e49190610f02565b6109ee9190610f73565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d919061101c565b5050509150506402540be40081610a849190611097565b915050919050565b828054828255906000526020600020908101928215610b05579160200282015b82811115610b045782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aac565b5b509050610b129190610b16565b5090565b5b80821115610b2f576000816000905550600101610b17565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6382610b38565b9050919050565b610b7381610b58565b8114610b7e57600080fd5b50565b600081359050610b9081610b6a565b92915050565b600060208284031215610bac57610bab610b33565b5b6000610bba84828501610b81565b91505092915050565b6000819050919050565b610bd681610bc3565b82525050565b6000602082019050610bf16000830184610bcd565b92915050565b6000819050919050565b6000610c1c610c17610c1284610b38565b610bf7565b610b38565b9050919050565b6000610c2e82610c01565b9050919050565b6000610c4082610c23565b9050919050565b610c5081610c35565b82525050565b6000602082019050610c6b6000830184610c47565b92915050565b610c7a81610b58565b82525050565b6000602082019050610c956000830184610c71565b92915050565b610ca481610bc3565b8114610caf57600080fd5b50565b600081359050610cc181610c9b565b92915050565b600060208284031215610cdd57610cdc610b33565b5b6000610ceb84828501610cb2565b91505092915050565b600081519050610d0381610c9b565b92915050565b600060208284031215610d1f57610d1e610b33565b5b6000610d2d84828501610cf4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9f82610bc3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610dd157610dd0610d65565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e26600083610e0b565b9150610e3182610e16565b600082019050919050565b6000610e4782610e19565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e98601b83610e51565b9150610ea382610e62565b602082019050919050565b60006020820190508181036000830152610ec781610e8b565b9050919050565b6000610ed982610bc3565b9150610ee483610bc3565b9250828201905080821115610efc57610efb610d65565b5b92915050565b6000610f0d82610bc3565b9150610f1883610bc3565b9250828202610f2681610bc3565b91508282048414831517610f3d57610f3c610d65565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f7e82610bc3565b9150610f8983610bc3565b925082610f9957610f98610f44565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fc381610fa4565b8114610fce57600080fd5b50565b600081519050610fe081610fba565b92915050565b6000819050919050565b610ff981610fe6565b811461100457600080fd5b50565b60008151905061101681610ff0565b92915050565b600080600080600060a0868803121561103857611037610b33565b5b600061104688828901610fd1565b955050602061105788828901611007565b945050604061106888828901610cf4565b935050606061107988828901610cf4565b925050608061108a88828901610fd1565b9150509295509295909350565b60006110a282610fe6565b91506110ad83610fe6565b92508282026110bb81610fe6565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110f3576110f2610d65565b5b828205841483151761110857611107610d65565b5b509291505056fea26469706673582212206c863ce9af9ca694f3b030933a5d541c245f1f96783ba6c90fed92d4e96dc8bc64736f6c63430008120033",
    "deployedBytecode": "0x6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461016b5780639e87a5cd14610196578063b60d4288146101c1578063be2693f0146101cb578063d7b4750c146101e257610091565b80630343fb25146100965780630d8e6e2c146100d35780633ccfd60b146100fe5780636b69a59214610115578063741bef1a14610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610b96565b61021f565b6040516100ca9190610bdc565b60405180910390f35b3480156100df57600080fd5b506100e8610268565b6040516100f59190610bdc565b60405180910390f35b34801561010a57600080fd5b50610113610300565b005b34801561012157600080fd5b5061012a61052a565b6040516101379190610bdc565b60405180910390f35b34801561014c57600080fd5b50610155610537565b6040516101629190610c56565b60405180910390f35b34801561017757600080fd5b5061018061055d565b60405161018d9190610c80565b60405180910390f35b3480156101a257600080fd5b506101ab610585565b6040516101b89190610c56565b60405180910390f35b6101c96105af565b005b3480156101d757600080fd5b506101e06106ea565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610cc7565b610978565b6040516102169190610c80565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610d09565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610385576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104305760008082815481106103aa576103a9610d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042890610d94565b915050610388565b50600067ffffffffffffffff81111561044c5761044b610ddc565b5b60405190808252806020026020018201604052801561047a5781602001602082028036833780820191505090505b5060009080519060200190610490929190610a8c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104d790610e3c565b60006040518083038185875af1925050503d8060008114610514576040519150601f19603f3d011682016040523d82523d6000602084013e610519565b606091505b505090508061052757600080fd5b50565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105ee600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109bf90919063ffffffff16565b101561062f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062690610eae565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461067e9190610ece565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107f257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107a8575b5050505050905060005b815181101561087d57600082828151811061081a57610819610d36565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061087590610d94565b9150506107fc565b50600067ffffffffffffffff81111561089957610898610ddc565b5b6040519080825280602002602001820160405280156108c75781602001602082028036833780820191505090505b50600090805190602001906108dd929190610a8c565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161092490610e3c565b60006040518083038185875af1925050503d8060008114610961576040519150601f19603f3d011682016040523d82523d6000602084013e610966565b606091505b505090508061097457600080fd5b5050565b600080828154811061098d5761098c610d36565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109cb836109fb565b90506000670de0b6b3a764000085836109e49190610f02565b6109ee9190610f73565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d919061101c565b5050509150506402540be40081610a849190611097565b915050919050565b828054828255906000526020600020908101928215610b05579160200282015b82811115610b045782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aac565b5b509050610b129190610b16565b5090565b5b80821115610b2f576000816000905550600101610b17565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6382610b38565b9050919050565b610b7381610b58565b8114610b7e57600080fd5b50565b600081359050610b9081610b6a565b92915050565b600060208284031215610bac57610bab610b33565b5b6000610bba84828501610b81565b91505092915050565b6000819050919050565b610bd681610bc3565b82525050565b6000602082019050610bf16000830184610bcd565b92915050565b6000819050919050565b6000610c1c610c17610c1284610b38565b610bf7565b610b38565b9050919050565b6000610c2e82610c01565b9050919050565b6000610c4082610c23565b9050919050565b610c5081610c35565b82525050565b6000602082019050610c6b6000830184610c47565b92915050565b610c7a81610b58565b82525050565b6000602082019050610c956000830184610c71565b92915050565b610ca481610bc3565b8114610caf57600080fd5b50565b600081359050610cc181610c9b565b92915050565b600060208284031215610cdd57610cdc610b33565b5b6000610ceb84828501610cb2565b91505092915050565b600081519050610d0381610c9b565b92915050565b600060208284031215610d1f57610d1e610b33565b5b6000610d2d84828501610cf4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9f82610bc3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610dd157610dd0610d65565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e26600083610e0b565b9150610e3182610e16565b600082019050919050565b6000610e4782610e19565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e98601b83610e51565b9150610ea382610e62565b602082019050919050565b60006020820190508181036000830152610ec781610e8b565b9050919050565b6000610ed982610bc3565b9150610ee483610bc3565b9250828201905080821115610efc57610efb610d65565b5b92915050565b6000610f0d82610bc3565b9150610f1883610bc3565b9250828202610f2681610bc3565b91508282048414831517610f3d57610f3c610d65565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f7e82610bc3565b9150610f8983610bc3565b925082610f9957610f98610f44565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fc381610fa4565b8114610fce57600080fd5b50565b600081519050610fe081610fba565b92915050565b6000819050919050565b610ff981610fe6565b811461100457600080fd5b50565b60008151905061101681610ff0565b92915050565b600080600080600060a0868803121561103857611037610b33565b5b600061104688828901610fd1565b955050602061105788828901611007565b945050604061106888828901610cf4565b935050606061107988828901610cf4565b925050608061108a88828901610fd1565b9150509295509295909350565b60006110a282610fe6565b91506110ad83610fe6565b92508282026110bb81610fe6565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110f3576110f2610d65565b5b828205841483151761110857611107610d65565b5b509291505056fea26469706673582212206c863ce9af9ca694f3b030933a5d541c245f1f96783ba6c90fed92d4e96dc8bc64736f6c63430008120033",
    "devdoc": {
        "author": "Patrick Collins",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "getAddressToAmountFunded(address)": {
                "params": {
                    "fundingAddress": "the address of the funder"
                },
                "returns": {
                    "_0": "the amount funded"
                }
            }
        },
        "title": "A sample Funding Contract",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "Funds our contract based on the ETH/USD price"
            },
            "getAddressToAmountFunded(address)": {
                "notice": "Gets the amount that an address has funded"
            }
        },
        "notice": "This contract is for creating a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 67,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 71,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
